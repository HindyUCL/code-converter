#!/usr/bin/env python3
"""
Code Converter - Convert files and folders into machine-readable format
for easy sharing with AI tools like ChatGPT.

Usage:
    code_converter file <file_path> [output_path]
    code_converter folder <folder_path> [output_path]
"""

import os
import sys
import argparse
from pathlib import Path
import mimetypes
from typing import List, Set

# Common file extensions to include
CODE_EXTENSIONS = {
    '.py', '.js', '.ts', '.jsx', '.tsx', '.java', '.cpp', '.c', '.h', '.hpp',
    '.cs', '.php', '.rb', '.go', '.rs', '.swift', '.kt', '.scala', '.r',
    '.m', '.mm', '.pl', '.sh', '.bash', '.zsh', '.fish', '.ps1', '.bat',
    '.html', '.htm', '.css', '.scss', '.sass', '.less', '.xml', '.json',
    '.yaml', '.yml', '.toml', '.ini', '.cfg', '.conf', '.sql', '.md',
    '.txt', '.log', '.dockerfile', '.dockerignore', '.gitignore',
    '.env', '.env.example', '.gitattributes', '.editorconfig'
}

# Directories to skip
SKIP_DIRS = {
    '.git', '__pycache__', 'node_modules', '.venv', 'venv', 'env',
    '.env', 'build', 'dist', 'target', 'bin', 'obj', '.vscode',
    '.idea', '.vs', '.pytest_cache', '.mypy_cache',
    'vendor', 'composer', '.next', '.nuxt', 'out', 'public'
}

def is_text_file(file_path: Path) -> bool:
    """Check if a file is likely a text file."""
    try:
        # Check file extension
        if file_path.suffix.lower() in CODE_EXTENSIONS:
            return True
        
        # Check MIME type
        mime_type, _ = mimetypes.guess_type(str(file_path))
        if mime_type and mime_type.startswith('text/'):
            return True
        
        # Try to read first few bytes to check if it's text
        with open(file_path, 'rb') as f:
            chunk = f.read(1024)
            try:
                chunk.decode('utf-8')
                return True
            except UnicodeDecodeError:
                return False
    except (OSError, IOError):
        return False

def should_skip_directory(dir_name: str) -> bool:
    """Check if directory should be skipped."""
    return dir_name in SKIP_DIRS or dir_name.startswith('.')

def format_file_content(file_path: Path, content: str) -> str:
    """Format file content with proper headers."""
    relative_path = file_path.relative_to(file_path.parent.parent) if file_path.parent.parent.exists() else file_path.name
    
    return f"""
{'='*80}
FILE: {relative_path}
{'='*80}
{content}
"""

def convert_single_file(file_path: str, output_path: str = None) -> None:
    """Convert a single file to machine-readable format."""
    file_path = Path(file_path)
    
    if not file_path.exists():
        print(f"Error: File '{file_path}' does not exist.")
        sys.exit(1)
    
    if not file_path.is_file():
        print(f"Error: '{file_path}' is not a file.")
        sys.exit(1)
    
    if not is_text_file(file_path):
        print(f"Warning: '{file_path}' may not be a text file. Proceeding anyway...")
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
    except UnicodeDecodeError:
        try:
            with open(file_path, 'r', encoding='latin-1') as f:
                content = f.read()
        except Exception as e:
            print(f"Error reading file '{file_path}': {e}")
            sys.exit(1)
    except Exception as e:
        print(f"Error reading file '{file_path}': {e}")
        sys.exit(1)
    
    formatted_content = format_file_content(file_path, content)
    
    if output_path:
        output_path = Path(output_path)
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(formatted_content)
        print(f"Converted file saved to: {output_path}")
    else:
        print(formatted_content)

def convert_folder(folder_path: str, output_path: str = None) -> None:
    """Convert a folder to machine-readable format."""
    folder_path = Path(folder_path)
    
    if not folder_path.exists():
        print(f"Error: Folder '{folder_path}' does not exist.")
        sys.exit(1)
    
    if not folder_path.is_dir():
        print(f"Error: '{folder_path}' is not a directory.")
        sys.exit(1)
    
    all_content = []
    all_content.append(f"# Code Repository: {folder_path.name}")
    all_content.append(f"# Generated by Code Converter")
    all_content.append("="*80)
    all_content.append("")
    
    # Walk through the directory
    for root, dirs, files in os.walk(folder_path):
        # Remove directories we want to skip
        dirs[:] = [d for d in dirs if not should_skip_directory(d)]
        
        root_path = Path(root)
        
        for file_name in files:
            file_path = root_path / file_name
            
            # Skip if not a text file
            if not is_text_file(file_path):
                continue
            
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
            except UnicodeDecodeError:
                try:
                    with open(file_path, 'r', encoding='latin-1') as f:
                        content = f.read()
                except Exception:
                    print(f"Warning: Could not read file '{file_path}'. Skipping...")
                    continue
            except Exception:
                print(f"Warning: Could not read file '{file_path}'. Skipping...")
                continue
            
            # Get relative path from the folder being converted
            relative_path = file_path.relative_to(folder_path)
            formatted_content = format_file_content(relative_path, content)
            all_content.append(formatted_content)
    
    final_content = '\n'.join(all_content)
    
    if output_path:
        output_path = Path(output_path)
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(final_content)
        print(f"Converted folder saved to: {output_path}")
    else:
        print(final_content)

def main():
    parser = argparse.ArgumentParser(
        description="Convert files and folders into machine-readable format for AI tools",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  code_converter file script.py                    # Convert single file to stdout
  code_converter file script.py output.txt         # Convert single file to output.txt
  code_converter folder ./my_project               # Convert folder to stdout
  code_converter folder ./my_project output.txt         # Convert folder to output.txt
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # File command
    file_parser = subparsers.add_parser('file', help='Convert a single file')
    file_parser.add_argument('file_path', help='Path to the file to convert')
    file_parser.add_argument('output_path', nargs='?', help='Output file path (optional)')
    
    # Folder command
    folder_parser = subparsers.add_parser('folder', help='Convert a folder')
    folder_parser.add_argument('folder_path', help='Path to the folder to convert')
    folder_parser.add_argument('output_path', nargs='?', help='Output file path (optional)')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        sys.exit(1)
    
    if args.command == 'file':
        convert_single_file(args.file_path, args.output_path)
    elif args.command == 'folder':
        convert_folder(args.folder_path, args.output_path)

if __name__ == '__main__':
    main()
